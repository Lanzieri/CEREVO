---
// BaseLayout.astro — Layout base de la aplicación
// NO debe importarse a sí mismo.
// Recibe children y slots para renderizar dentro del layout.
const { title, description } = Astro.props;
---

<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>{title}</title>
  <meta name="description" content={description} />
  <link rel="stylesheet" href="/src/styles/global.css" />
</head>
<body class="bg-black text-white overflow-x-hidden">
  <!-- HEADER (Scroll behavior) -->
  <header id="main-header" class="fixed top-0 left-0 right-0 z-50 bg-black/90 backdrop-blur-sm border-b border-white/10 transition-transform duration-300 ease-in-out">
    <div class="max-w-6xl mx-auto px-4 flex justify-between items-center h-16">
      <nav class="flex gap-2 sm:gap-4 text-sm font-medium">
        <a href="#" class="px-3 py-1.5 rounded-lg text-white/80 hover:text-white hover:bg-white/10 transition">Inicio</a>
        <a href="#beneficios" class="px-3 py-1.5 rounded-lg text-white/80 hover:text-white hover:bg-white/10 transition">Beneficios</a>
        <a href="#servicios" class="px-3 py-1.5 rounded-lg text-white/80 hover:text-white hover:bg-white/10 transition">Servicios</a>
        <a href="#como-trabajamos" class="px-3 py-1.5 rounded-lg text-white/80 hover:text-white hover:bg-white/10 transition">Cómo trabajamos</a>
      </nav>
      <a href="#contacto" class="px-4 py-2 rounded-lg text-white text-sm font-medium bg-gradient-to-r from-[#c026d3] to-[#7c3aed] hover:opacity-95 transition">
        Empezar
      </a>
    </div>
  </header>

  <!-- RENDERIZADO DEL CONTENIDO DE LA PÁGINA -->
  <main class="pt-16">
    <slot />
  </main>

  <!-- SCRIPTS -->
  <script>
    // Scroll behavior para header
    let lastScrollY = window.scrollY;
    const header = document.getElementById('main-header');
    const threshold = 10;

    window.addEventListener('scroll', () => {
      const currentScrollY = window.scrollY;
      if (Math.abs(currentScrollY - lastScrollY) < threshold) return;

      if (currentScrollY > lastScrollY && currentScrollY > 60) {
        header.classList.add('transform', '-translate-y-full');
      } else {
        header.classList.remove('-translate-y-full');
      }
      lastScrollY = currentScrollY;
    });

    // Contadores animados
    document.addEventListener('DOMContentLoaded', () => {
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const metric = entry.target.querySelector('.metric');
            if (metric && !metric.hasAttribute('data-animated')) {
              const target = parseInt(metric.getAttribute('data-to'));
              let current = 0;
              const duration = 2000;
              const stepTime = duration / target;
              const timer = setInterval(() => {
                current += 1;
                metric.textContent = current;
                if (current >= target) {
                  clearInterval(timer);
                  metric.setAttribute('data-animated', 'true');
                }
              }, stepTime);
            }
          }
        });
      }, { threshold: 0.5 });

      document.querySelectorAll('.benefit-card').forEach(card => {
        observer.observe(card);
      });
    });
  </script>
</body>
</html>